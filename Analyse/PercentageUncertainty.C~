// Plot the combined 1D distributons (pull and frac. unc.)
// Sam Grant
// samuel.grant.18@ucl.ac.uk
// May-June 2019

#include <iostream>
#include "TF1.h"
#include "TH1D.h"
#include "TCanvas.h"
#include "TFile.h"
#include "TStyle.h"
#include "TLegend.h"
#include "TDirectory.h"
#include "TAttMarker.h"
#include "TPaveStats.h"

using namespace std;

// Define percentage uncertainty 
double Value(double laserValue, double EpValue) {
  // Fractional shift
  double result = (laserValue - EpValue) / laserValue;
  result = result * 100;
  return result;
}
// Define percentage uncertainty uncertainty
double Error(double laserValue, double laserError, double EpValue, double EpError) {
  double result = 0.0;
  return result;
}
// Drawing function
void Draw(TH1D *hist, TFile *output, string fname, string title, bool fit) {
  TCanvas *c = new TCanvas("c","c",3000,2000);
  TF1 *lineFit = new TF1("lineFit", "pol0");
  lineFit->SetLineWidth(5);
  gStyle->SetOptStat(2210);
  if(fit) {
    hist->Fit(lineFit);
    gStyle->SetOptFit(11);
  }
  //  hist->SetName(name.c_str());
  hist->SetLineWidth(5);
  hist->SetLineColor(kBlack);
  hist->SetTitle(title.c_str());
  hist->Draw();
  c->SaveAs(fname.c_str());
  hist->SetDirectory(output);
  delete c;
  return;
}

void Fill(vector<double> values, vector<double> errors) {
  
  //  TH1D *hist = new TH1D("hist","hist title",veco
  return;
}



int main() {
  
  string EpInputName = "RootFiles/EpParameters_Q.root";
  string laserInputName = "RootFiles/LaserParameters.root";
  string outputName = "RootFiles/PercentageUncertainty.root";

  // Set inputs
  TFile *EpInput = TFile::Open(EpInputName.c_str());
  TFile *laserInput = TFile::Open(laserInputName.c_str());

  // Set output
  TFile *output = new TFile(outputName.c_str(),"RECREATE");
  
  cout<<"Reading... "<<EpInputName<<endl;
  cout<<"Reading... "<<laserInputName<<endl;
    
  string h[4] = {"tau_13","tau_19","amp_13","amp_19"};
 
  vector<double> tauValues_;
  vector<double> alphaValues_;
  vector<double> tauErrors_;
  vector<double> alphaErrors_;



  // Start hist loop
  cout<<"Starting histogram loop\n"<<endl;
  for (int ihist(0); ihist < 4; ihist++) {
    
    cout<<"\nhist : "<<h[ihist]<<endl;
    
    TH1D *Ep = (TH1D*)EpInput->Get(h[ihist].c_str());
    TH1D *laser = (TH1D*)laserInput->Get(h[ihist].c_str());
    int counter = 0;
    // Start xtal loop
    for (int xtal(0); xtal < 54; xtal++) {

      cout<<"\nxtal "<<xtal<<endl;

      double val = Value(laser->GetBinContent(xtal+1),Ep->GetBinContent(xtal+1));
      double err = Error(laser->GetBinContent(xtal+1),laser->GetBinError(xtal+1),Ep->GetBinContent(xtal+1),Ep->GetBinError(xtal+1));

      if(ihist < 2) {
	tauValues_.push_back(val);
	tauErrors_.push_back(err);
      }
      else if(ihist >= 2) {
	alphaValues_.push_back(val);
	alphaErrors_.push_back(err);
      }
      else {
	cout<<"Error"<<endl;
      }
      // Count
      counter++;
    } // End xtal loop
      cout<<"\nSurviving xtals: "<<counter<<endl;
  } // End hist loop

  if(tauValues_.size() != tauErrors_.size()) cout <<"Error, tau vectors not equally size\n"<<endl;
  if(alphaValues_.size() != alphaErrors_.size()) cout <<"Error, tau vectors not equally size\n"<<endl;
  
  



  
  /* string axes1 = ";Pull [#sigma];Entries"; */
  /* string axes2 = ";(Laser - E/p) / Laser [%];Entries"; */
  
  /* draw(pullHist,output,("Plots/pull_1D"+suffix+".png").c_str(),"St 12 & 18 | Pull (Combined)"+axes1,false); */
  /* draw(fracHist,output,("Plots/frac_1D"+suffix+".png").c_str(),"St 12 & 18 | Percentage Uncertainty (Combined)"+axes2,false); */

  /* pullHistAmp->GetYaxis()->SetRangeUser(0,6.5); */
  /* draw2(pullHistAmp,pullHistTau,output,("Plots/pull_overlay_1D"+suffix+".png").c_str(),"St 12 & 18 | Pull"+axes1,false); */
  /* fracHistAmp->GetYaxis()->SetRangeUser(0,9.5); */
  /* draw2(fracHistAmp,fracHistTau,output,("Plots/frac_overlay_1D"+suffix+".png").c_str(),"St 12 & 18 | Percentage Uncertainty"+axes2,false); */
    
  /* /\* draw(pullHistTau,output,("Plots/pull_tau_1D"+suffix+".png").c_str(),"Calos 13 & 19 | Pull (#tau);Pull [#sigma];Entries",false); *\/ */
  /* /\* draw(fracHistTau,output,("Plots/frac_tau_1D"+suffix+".png").c_str(),"Calos 13 & 19 | Percentage Uncertainty (#tau);(Laser - E/p) / Laser [%];Entries",false); *\/ */
  /* /\*  draw(pullHistAmp,output,("Plots/pull_amp_1D"+suffix+".png").c_str(),"Calos 13 & 19 | Pull (A);Pull [#sigma];Entries",false); *\/ */
  /* /\* draw(fracHistAmp,output,("Plots/frac_amp_1D"+suffix+".png").c_str(),"Calos 13 & 19 | Percentage Uncertainty (A);(Laser - E/p) / Laser [%];Entries",false); *\/ */
  /* output->Write();  */

  //  cout<<outputName<<" created"<<endl;
  return 0;
}
