// Sam Grant // samuel.grant.18@ucl.ac.uk#include <iostream>#include "FitGaussSlices.h"#include "CMAP.h"#include "TFile.h"#include "TCanvas.h"#include "TH1D.h"#include "TH2D.h"#include "TStyle.h"#include "TAxis.h"#include "TProfile.h"#include "TF1.h"#include "TDirectory.h"#include "TObject.h"#include "TGraph.h"#include "TLegend.h"#include "TPaveStats.h"using namespace std;int main() {  int cycles = 50;  string suffix = "";  bool save = false;//true;  string inputFname = "../Read/RootFiles/PlotsCorrectedTimeSlice.root";  string outputFname = "RootFiles/PlotsEnergyCorrectedTimeSlice.root";    TFile *input = TFile::Open(inputFname.c_str());  TFile *output = new TFile(outputFname.c_str(), "RECREATE");  cout << "Reading: " << inputFname << endl;  // Time slices  for (int tSlice(0); tSlice < 7; tSlice++) {    string slice[7] = {"0-30 #mus","30-60 #mus","60-90 #mus","90-120 #mus","120-150 #mus","150-180 #mus","180-210 #mus"};       //Station loop    for (int calo(13) ; calo < 20 ; calo = calo + 6 ) {       string stn = "St"+to_string(calo)+"_";      // Fiducial      for(int region(0); region < 2; region++) { 	string ffoo = "Ep_vs_E_"+to_string(region)+"_"+to_string(tSlice);	string afoo = ";In Fill Time [#mus];Cluster Energy, E [GeV]";	string fid;	if(region == 1) fid = ", Fiducal Region";	else fid = "";      	// Put strings together for iterting hist/file/title names	string tstn = "Stn "+to_string(calo-1)+fid;	string h = stn+ffoo;	string cmap_fname = stn+"cmap_"+ffoo;	string fit_fname = stn+ffoo;	string g_fname = stn+"gauss_"+ffoo;	string title = tstn+afoo;	//cout<<h<<endl;	TH2D *Ep_vs_E = (TH2D*)input->Get(h.c_str());	//	  Ep_vs_E->SetStats(0);	if (Ep_vs_E == 0) continue;	Ep_vs_E->SetName((slice[tSlice]).c_str());	//	Ep_vs_E->GetXaxis()->SetLimits(0,4.2*cycles);	Ep_vs_E->GetXaxis()->SetLimits(0,4);	CMAP(Ep_vs_E, title, cmap_fname, output, save);	FitGaussSlices(Ep_vs_E, title, fit_fname, g_fname, output, calo, true);      }    }    }  output->Write();  output->Close();  input->Close();  cout << "\nCreated: " << outputFname << endl;  return 0;}