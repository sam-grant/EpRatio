// Sam Grant // March 2019// samuel.grant.18@ucl.ac.uk#include <iostream>#include "FitGaussSlices.h"#include "CMAP.h"#include "TFile.h"#include "TCanvas.h"#include "TH1D.h"#include "TH2D.h"#include "TStyle.h"#include "TAxis.h"#include "TProfile.h"#include "TF1.h"#include "TDirectory.h"#include "TObject.h"#include "TGraph.h"#include "TLegend.h"#include "TPaveStats.h"using namespace std;int main() {  int cycles = 50;  // string suffix = "_skip18";  string suffix = "";  bool save = false;  //  string inputFname = "../Read/RootFiles/TimeBreakoutLong"+suffix+".root";  // string inputFname = "../ReadNTuples/RootFiles/RawTimeBreakout_9day.root";  // string outputFname = "RootFiles/PlotsTimeBreakout_9day.root";//Long"+suffix+".root";  string inputFname = "../ReadNTuples/RootFi  string inputFname = "../ReadNTuples/RootFiles/RawTimeBreakout.root";  string outputFname = "RootFiles/PlotsTimeBreakout_60hr.root";    TFile *input = TFile::Open(inputFname.c_str());  TFile *output = new TFile(outputFname.c_str(), "RECREATE");  cout << "Reading: " << input << endl;  //Station loop  for (int calo = 13 ; calo < 20 ; calo = calo + 6 ) {     string stn = "St"+to_string(calo)+"_";    // string ffoo = "Ep_vs_t";    // string afoo = ";In Fill Time [#mus];E/p";    string ffoo = "Ep_vs_t";    string afoo = ";In Fill Time [#mus];E/p";    //     string tfoo = "E/p vs t";		for (int brd = 0 ; brd < 2 ; brd++) {	  	  // Put strings together for iterting hist/file/title names	  string tstn;	  if(brd == 0) tstn = "Stn "+to_string(calo-1)+", short #tau_{r}";	  if(brd == 1) tstn = "Stn "+to_string(calo-1)+", long #tau_{r}";	  string h = stn+ffoo+"_"+to_string(brd);	  string cmap_fname = stn+"cmap_"+ffoo+"_"+to_string(brd);	  string fit_fname = stn+ffoo+"_"+to_string(brd);	  string g_fname = stn+"gauss_"+ffoo+"_"+to_string(brd);	  string title = tstn+afoo;	  //cout<<h<<endl;	  TH2D *Ep_vs_t = (TH2D*)input->Get(h.c_str());       	  if (Ep_vs_t == 0) continue;          Ep_vs_t->GetXaxis()->SetLimits(0,4.2*cycles);	  CMAP(Ep_vs_t, title, cmap_fname, output, save);	  FitGaussSlices(Ep_vs_t, title, fit_fname, g_fname, output, calo, save);	}  }    output->Write();  output->Close();  input->Close();  cout << "\nCreated: " << outputFname << endl;  return 0;}