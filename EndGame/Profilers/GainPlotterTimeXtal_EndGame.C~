// Code to make E/p vs E, E/p vs p, and E/p vs t plots// Using either gain corrected, or uncorrected// It also performs gauss fits in Y to slices in X// Sam Grant // March 2019// samuel.grant.18@ucl.ac.uk#include <iostream>#include "FitGaussSlices.h"#include "CMAP.h"#include "TFile.h"#include "TCanvas.h"#include "TH1D.h"#include "TH2D.h"#include "TStyle.h"#include "TAxis.h"#include "TProfile.h"#include "TF1.h"#include "TDirectory.h"#include "TObject.h"#include "TGraph.h"#include "TLegend.h"#include "TPaveStats.h"using namespace std;int main() {  int cycles = 50;  bool save = false;  string inputFname = "../gm2offline_ana_0_17293.00070.root";  string outputFname = "../ProfilesTimeXtal_EndGame.root";    TFile *input = TFile::Open(inputFname.c_str());  TFile *output = new TFile(outputFname.c_str(), "RECREATE");/*  output->cd();  gDirectory->mkdir("PreGainCorr");  output->cd("PreGainCorr");  gDirectory->mkdir("GaussFits");  gDirectory->mkdir("Profiles");  output->cd();  gDirectory->mkdir("GainCorr");  output->cd("GainCorr");  gDirectory->mkdir("GaussFits");  gDirectory->mkdir("Profiles");  input->cd();*/  cout << "Reading: " << inputFname << endl;  // Station loop  for (int stn = 12 ; stn < 19; stn = stn + 6 ) {     string name = "Station["+to_string(stn)+"]/PositronsQuality/EoverPvsTime";    string axes = ";Cluster time [#mus];E/p";    TH2D *h_gain = (TH2D*)input->Get(name);    TH2D *h_preGain = (TH2D*)input->Get(name+"PreGainCorr");    // Crystal loop    for (int xtal = 0 ; xtal < 54 ; xtal++) {//	  // Put strings together for iterting hist/file/title names//     string tstn = "Stn "+to_string(calo-1)+", Crystal "+to_string(xtal);//     string h = stn+ffoo+"_"+to_string(xtal);//     string cmap_fname = stn+"cmap_"+ffoo+"_"+to_string(xtal);//     string fit_fname = stn+ffoo+"_"+to_string(xtal);//     string g_fname = stn+"gauss_"+ffoo+"_"+to_string(xtal);//     string title = tstn+afoo;	  //cout<<h<<endl;    //     if (Ep_vs_t == 0) continue;//     Ep_vs_t->GetXaxis()->SetLimits(0,4.2*cycles);//     CMAP(Ep_vs_t, title, cmap_fname, output, save);//     FitGaussSlices(Ep_vs_t, title, fit_fname, g_fname, output, calo, save);   } // xtal } // stn output->Write(); output->Close(); input->Close(); cout << "\nCreated: " << outputFname << endl; return 0;}