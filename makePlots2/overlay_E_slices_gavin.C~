// Sam Grant 
// May 2019
// samuel.grant.18@ucl.ac.uk

#include <iostream>
#include "TFile.h"
#include "TCanvas.h"
#include "TH1D.h"
#include "TStyle.h"
//#include "TAxis.h"
#include "TLegend.h"
#include "TDirectory.h"
using namespace std;


int main() {

  int norm_bin = 23;

  
  TFile *input1 = TFile::Open("fits_corrected_nandita.root");
  TFile *input2 = TFile::Open("fits_uncorrected_nandita.root");
  TFile *mipFile = TFile::Open("MIP_peaks.root");

  TFile *output = new TFile("overlaid_E_slices.root", "RECREATE");
  // Station loop
  for (int stn = 13 ; stn < 20 ; stn = stn + 6 ) {
    
    string h0 = "St"+to_string(stn)+"_fit_Ep_vs_xtal_0";
    string h1 = "St"+to_string(stn)+"_fit_E_vs_xtal_1";
    string h2 = "St"+to_string(stn)+"_fit_Ep_vs_xtal_2";
    string h3 = "St"+to_string(stn)+"_fit_Ep_vs_xtal_3";
    string hmips = "St"+to_string(stn)+"_mips";

    TH1D *mips = (TH1D*)mipFile->Get(hmips.c_str());

    TH1D *lo_c = (TH1D*)input1->Get(h0.c_str());
    TH1D *mu_c = (TH1D*)input1->Get(h1.c_str());
    TH1D *med_c = (TH1D*)input1->Get(h2.c_str());
    TH1D *hi_c = (TH1D*)input1->Get(h3.c_str());
   
    TH1D *lo_u = (TH1D*)input2->Get(h0.c_str());
    TH1D *mu_u = (TH1D*)input2->Get(h1.c_str());
    TH1D *med_u = (TH1D*)input2->Get(h2.c_str());
    TH1D *hi_u = (TH1D*)input2->Get(h3.c_str());
    
    // Get scale factors
    double lo_c_sf = lo_c->GetBinContent(norm_bin);
    double mu_c_sf=  mu_c->GetBinContent(norm_bin);
    double med_c_sf = med_c->GetBinContent(norm_bin);
    double hi_c_sf = hi_c->GetBinContent(norm_bin);

   
    double lo_u_sf = lo_u->GetBinContent(norm_bin);
    double mu_u_sf= mu_u->GetBinContent(norm_bin);
    double med_u_sf = med_u->GetBinContent(norm_bin);
    double hi_u_sf = hi_u->GetBinContent(norm_bin);
   
    lo_c->Scale(1./lo_c_sf);
    mu_c->Scale(1./mu_c_sf);
    med_c->Scale(1./med_c_sf);
    hi_c->Scale(1./hi_c_sf);

   
    lo_u->Scale(1./lo_u_sf);
     mu_u->Scale(1./mu_u_sf);
     med_u->Scale(1./med_u_sf);
     hi_u->Scale(1./hi_u_sf);

     cout << "mu_c post: " << mu_c->GetBinContent(norm_bin) << endl;
     cout << "lo_c post: " << lo_c->GetBinContent(norm_bin) << endl;
     cout << "med_c post: " << med_c->GetBinContent(norm_bin) << endl;
     cout << "hi_c post: " << hi_c->GetBinContent(norm_bin) << endl;

     cout << "mu_u post: " << mu_u->GetBinContent(norm_bin) << endl;
     cout << "lo_u post: " << lo_u->GetBinContent(norm_bin) << endl;
     cout << "med_u post: " << med_u->GetBinContent(norm_bin) << endl;
     cout << "hi_u post: " << hi_u->GetBinContent(norm_bin) << endl;
      
      TCanvas *c1  = new TCanvas();

      lo_c->SetTitle("e^{+}: 0-1200 MeV");
      mu_c->SetTitle("Lost #mu^{+}");
      med_c->SetTitle("e^{+}: 1200-2400 MeV");
      hi_c->SetTitle("e^{+}: 2400-3600 MeV");
       
      lo_c->SetLineColor(kBlue);
      lo_c->SetLineWidth(2);
      mu_c->SetLineColor(kBlack);
      mu_c->SetLineWidth(2);
      med_c->SetLineColor(kGreen-3);
      med_c->SetLineWidth(2);
      hi_c->SetLineColor(kRed);
      hi_c->SetLineWidth(2);



      mu_c->GetYaxis()->SetRangeUser(0.75,1.15);

      mu_c->Draw();
      lo_c->Draw("same");
      med_c->Draw("same");
      hi_c->Draw("same");

      c1->BuildLegend(0.69,0.79,0.89,0.89);

      gPad->SetGridx();
      gPad->SetGridy();
      mu_c->SetTitle(("Calo "+to_string(stn)+" | Gain Corrected;Crystal Number; Normalised Units").c_str());
      string fname1 = "St"+to_string(stn)+"_slices_gain_corrected.pdf";

      c1->SaveAs(fname1.c_str());

      c1->Write();//SetDirectory(output);
      delete c1;




      TCanvas *c2  = new TCanvas();

       lo_u->SetTitle("e^{+}: 0-1200 MeV");
 mu_u->SetTitle("Lost #mu^{+}");
       med_u->SetTitle("e^{+}: 1200-2400 MeV");
      hi_u->SetTitle("e^{+}: 2400-3600 MeV");
       
      lo_u->SetLineColor(kBlue);
      lo_u->SetLineWidth(2);
      mu_u->SetLineColor(kBlack);
      mu_u->SetLineWidth(2);
      med_u->SetLineColor(kGreen-3);
      med_u->SetLineWidth(2);
      hi_u->SetLineColor(kRed);
      hi_u->SetLineWidth(2);

      mu_u->GetYaxis()->SetRangeUser(0.75,1.15);

      mu_u->Draw();
      lo_u->Draw("same");
      med_u->Draw("same");
      hi_u->Draw("same");

      c2->BuildLegend(0.69,0.79,0.89,0.89);
      mu_u->SetTitle(("Calo "+to_string(stn)+" | Gain Uncorrected;Crystal Number; Normalised Units").c_str());

      gPad->SetGridx();
      gPad->SetGridy();

      string fname2 = "St"+to_string(stn)+"_slices_gain_uncorrected.pdf";

      c2->SaveAs(fname2.c_str());
      lo_u->SetDirectory(output);
      delete c2;


            // Ratios
      ////////////////////////////
      // Ratios

      TCanvas *c3  = new TCanvas();
      // c3->Divide(1,3);
      // c3->cd(1);
      lo_c->SetTitle("e^{+}: 0-1200 MeV");
      lo_c->Divide(mu_c);
      med_c->Divide(mu_c);
      hi_c->Divide(mu_c);

      lo_c->Draw();
      med_c->Draw("same");
      hi_c->Draw("same");

      // lo_c->SetTitle(("Calo "+to_string(stn)+" | Gain Corrected Ratios;Crystal Number; Arb. Units").c_str());
      lo_c->GetYaxis()->SetRangeUser(0.75,1.15);
      gPad->SetGridx();
      gPad->SetGridy();
      
      c3->BuildLegend(0.69,0.79,0.89,0.89);
      lo_c->SetTitle(("Calo "+to_string(stn)+" | Gain Corrected Ratios;Crystal Number; Arb. Units").c_str());
      string fname3 = "St"+to_string(stn)+"_ratio_corrected.pdf";
      c3->SaveAs(fname3.c_str());
      delete c3;

      TCanvas *c4  = new TCanvas();
      // c3->Divide(1,3);
      // c3->cd(1);

       lo_u->SetTitle("e^{+}: 0-1200 MeV");
      lo_u->Divide(mu_u);
      med_u->Divide(mu_u);
      hi_u->Divide(mu_u);

      lo_u->Draw();
      med_u->Draw("same");
      hi_u->Draw("same");

      //  lo_u->SetTitle(("Calo "+to_string(stn)+" | Gain Uncorrected Ratios;Crystal Number; Arb. Units").c_str());
      lo_u->GetYaxis()->SetRangeUser(0.75,1.15);
      gPad->SetGridx();
      gPad->SetGridy();
      
    c4->BuildLegend(0.69,0.79,0.89,0.89);
    lo_u->SetTitle(("Calo "+to_string(stn)+" | Gain Uncorrected Ratios;Crystal Number; Arb. Units").c_str());
      string fname4 = "St"+to_string(stn)+"_ratio_uncorrected.pdf";
      c4->SaveAs(fname4.c_str());
      delete c4;

      // compare with mips 
      TCanvas *c5  = new TCanvas();
      c5->Divide(1,2);
      //    mu_c->SetTitle("Lost #mu^{+} (Sam)");
      //  mips->SetTitle("Lost #mu^{+} (Nandita)");
      // c5->cd(1)->BuildLegend(0.69,0.79,0.89,0.89);
      c5->cd(1);
      mu_c->SetTitle("Lost #mu^{+} (Sam)");
      mips->SetTitle("Lost #mu^{+} (Nandita)");
      // c5->BuildLegend(0.69,0.79,0.89,0.89);
      mu_c->SetLineColor(kBlue);
      mu_c->SetLineWidth(2);
      mips->SetLineColor(kRed);
      mips->SetLineWidth(2);
     
      mu_c->GetYaxis()->SetRangeUser(0.75,1.2);
      //  c5->cd(1)->BuildLegend(0.69,0.79,0.89,0.89);
      //  c5->cd(1)
      mu_c->Draw();
      mips->Draw("same");
     c5->cd(1)->BuildLegend(0.69,0.79,0.89,0.89);
      //  c5->BuildLegend(0.69,0.79,0.89,0.89);

       gPad->SetGrid();
      //gPad->SetGrid();
      
       mu_c->SetTitle(("Calo "+to_string(stn)+" | MIPs, Gain Corrected;Crystal Number; Normalised Units").c_str());
       
       c5->cd(2);
       TH1D *ratio = (TH1D*)mips->Clone("ratio");
       ratio->Divide(mu_c);
       ratio->SetTitle(("Calo "+to_string(stn)+" | Ratio;Crystal Number; Ratio").c_str());
       ratio->SetLineColor(kBlack);
      ratio->SetLineWidth(2);
       gPad->SetGrid();
      ratio->GetYaxis()->SetRangeUser(0.9,1.1);
       ratio->Draw();
      string fname5 = "St"+to_string(stn)+"_mip_comparison.pdf";
      //   c5->BuildLegend(0.69,0.79,0.89,0.89);
      c5->SaveAs(fname5.c_str());

      // c1->Write();//SetDirectory(output);
      delete c5;

  
  }

  
  output->Write();
  output->Close();
  return 0;
}
