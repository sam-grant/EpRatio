// Code to make E/p vs E, E/p vs p, and E/p vs t plots// Using either gain corrected, or uncorrected// It also performs gauss fits in Y to slices in X// Sam Grant // March 2019// samuel.grant.18@ucl.ac.uk#include <iostream>#include "fitSlicesGauss.h"#include "cmap.h"#include "TFile.h"#include "TCanvas.h"#include "TH1D.h"#include "TH2D.h"#include "TStyle.h"#include "TAxis.h"#include "TProfile.h"#include "TF1.h"#include "TDirectory.h"#include "TObject.h"#include "TGraph.h"#include "TLegend.h"#include "TPaveStats.h"using namespace std;int main() {  // Take input for gain corrected or uncorrected  bool save = false;    string whichFile = "../uncorrected/time_frac_cut_testing.root";  string output_fname = "fits_time_frac_cut_testing.root";    TFile *input = TFile::Open(whichFile.c_str());  TFile *output = new TFile(output_fname.c_str(), "RECREATE");  cout << "Reading: " << whichFile << endl;  //Station loop  for (int m = 13 ; m < 20 ; m = m + 6 ) {     string stn = "St"+to_string(m)+"_";    string tstn = "St "+to_string(m)+" | ";    cout<<"stn_"<<m<<endl;    // Breaker board loop    for (int j = 1 ; j < 3 ; j++ ) {      string name;      // double yMin, yMax;      if (j == 1 ) { 	name = ", Short Lifetime";      }       else if ( j == 2 ) {     	name = ", Long Lifetime";	}        // Start fiducial region loop      for (int l = 0 ; l < 3 ; l++ ) {	string ffoo = "Ep_vs_t_early";	string tfoo = "E/p vs t";	string afoo = ";Fill Time [#us];E/p";		string fid;	// For titles	if (l == 0) {	  fid = "";	}	else if (l == 1 ) { 	  fid = ", Fiducial";	} 	else if (l == 2 ) { 	  fid = ", Non Fiducial";	}	// Put strings together for iterting hist/file/title names       	string h = stn+ffoo+"_"+to_string(l)+"_"+to_string(j);//+"_"+to_string(j);	string cmap_fname = stn+"cmap_"+ffoo+"_"+to_string(l)+"_"+to_string(j);//+"_"+to_string(j);	string fit_fname = stn+"fit_"+ffoo+"_"+to_string(l)+"_"+to_string(j);//+"_"+to_string(j);	string g_fname = stn+"gauss_"+ffoo+"_"+to_string(l)+"_"+to_string(j);//+"_"+to_string(j)+"_";	string title = tstn+tfoo+name+fid+afoo;	TH2D *Ep_vs_t_early = (TH2D*)input->Get(h.c_str());	if (Ep_vs_t_early == 0) continue;	Ep_vs_t_early->GetXaxis()->SetLimits(0,4.2*50);      	cmap(Ep_vs_t_early, title, cmap_fname, output, save);	fitSlicesGauss(Ep_vs_t_early, title, fit_fname, g_fname, output, save);      }    }  }    output->Write();  output->Close();  cout << "\nCreated: " << output_fname << endl;  return 0;}