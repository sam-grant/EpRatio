// Code to make E/p vs E  plots// Sam Grant // March 2019// samuel.grant.18@ucl.ac.uk#include <iostream>#include "fitSlicesGauss.h"#include "cmap.h"#include "TFile.h"#include "TH1D.h"#include "TLegend.h"#include "THistPainter.h"using namespace std;void draw(vector<TH1D *> hist_, vector<int> xtal_, string title, string fname) {//, TH1D *hist2, string fname, string title) {    TCanvas *c = new TCanvas("c","c",1500,1000);  //  hist_.at(0)->Draw("PLC PMC");  TLegend *leg = new TLegend(0.1,0.7,0.4,0.89);  bool named[4] = {0,0,0,0};  for(int iPlot(0); iPlot < hist_.size(); iPlot++) {    //    cout<<xtal_.at(iPlot)<<endl;    hist_.at(iPlot)->SetLineWidth(4);    if(xtal_.at(iPlot) == 4||xtal_.at(iPlot) ==13||xtal_.at(iPlot) ==22||xtal_.at(iPlot) ==31||xtal_.at(iPlot) ==40||xtal_.at(iPlot) ==49) {      hist_.at(iPlot)->SetLineColor(kRed-4);      if(!named[0]) {	leg->AddEntry(hist_.at(iPlot),"5th Column");	cout<<xtal_.at(iPlot)<<" "<<endl;	named[0] = true;      }         }       if(xtal_.at(iPlot) == 5||xtal_.at(iPlot) ==14||xtal_.at(iPlot) ==23||xtal_.at(iPlot) ==32||xtal_.at(iPlot) ==41||xtal_.at(iPlot) ==50) {      hist_.at(iPlot)->SetLineColor(kGreen-3);      //      hist_.at(iPlot)->SetName("3rd Column");      if(!named[1]) {	leg->AddEntry(hist_.at(iPlot),"6th Column");	named[1] = true;      }            }        if(xtal_.at(iPlot) == 6 || xtal_.at(iPlot) == 15 ||xtal_.at(iPlot) ==24||xtal_.at(iPlot) ==33||xtal_.at(iPlot) ==42||xtal_.at(iPlot) ==51) {      hist_.at(iPlot)->SetLineColor(kOrange-3);      if(!named[2]) {	leg->AddEntry(hist_.at(iPlot),"7th Column");	named[2] = true;      }    }    if(xtal_.at(iPlot) == 7 || xtal_.at(iPlot) == 16 || xtal_.at(iPlot) == 25 || xtal_.at(iPlot) == 34 || xtal_.at(iPlot) == 43 || xtal_.at(iPlot) == 52) {      cout<<xtal_.at(iPlot)<<endl;      hist_.at(iPlot)->SetLineColor(kBlue);      if(!named[3]) {	leg->AddEntry(hist_.at(iPlot),"8th Column");	named[3] = true;      }    }    hist_.at(iPlot)->Scale(1./hist_.at(iPlot)->Integral());    hist_.at(iPlot)->SetStats(0);    hist_.at(iPlot)->SetTitle(title.c_str());    hist_.at(iPlot)->Draw("SAME"); }   leg->Draw();   c->SaveAs(fname.c_str());  delete c;  return;  }int main() {  // Take input for gain corrected or uncorrected  bool save = true;   string whichFile = "../uncorrected2/energy_and_momentum_xtal2.root";    TFile *input = TFile::Open(whichFile.c_str());    cout << "Reading: " << whichFile << endl;  vector<TH1D *> E_;  vector<TH1D *> p_;  vector<int> EXtal_;  vector<int> pXtal_;  //Station loop  int counter = 0;  for (int stn(13); stn < 20; stn = stn + 6) {    for (int xtal(0); xtal < 54; xtal++) {      TH1D *E = (TH1D*)input->Get( ("St"+to_string(stn)+"_E_"+to_string(xtal)).c_str() );      TH1D *p = (TH1D*)input->Get( ("St"+to_string(stn)+"_p_"+to_string(xtal)).c_str() );      if(E!=0 && E->GetEntries() > 50000) {	E_.push_back(E);	EXtal_.push_back(xtal);      }      if(p!=0 && p->GetEntries() > 50000) {	p_.push_back(p);	pXtal_.push_back(xtal);      }    }  }  draw(E_,EXtal_,"Energy distributions by crystal column;Cluster energy [MeV];Normalised entries","ene_dists_col.png");  draw(p_,pXtal_,"Momentum distributions by crystal column;Track momentum [MeV];Normalised entries","mom_dists_col.png");  input->Close();  return 0;}