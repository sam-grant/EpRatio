// Code for the omega_a meeting 05/04/2019 
// Use v9_17_01_new ntuples to fit functions to the E/p vs t_early and E/p vs E 
// Just consider high flux positrons 

#include <iostream>
#include "TFile.h"
#include "TCanvas.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TStyle.h"
#include "TAxis.h"
#include "TF1.h"
#include "TDirectory.h"
#include "TObject.h"
#include "TLegend.h"

using namespace std;// Colour map plotter
void cmap(TH2D *hist, string title, string fname, string name, TFile *output, bool save) { 
  //Force the ranges to be sensible if ROOT's stupid autoscale fails like normal
  double xmin = hist->GetXaxis()->GetBinCenter( hist -> FindFirstBinAbove(0,1) );
  double xmax = hist->GetXaxis()->GetBinCenter( hist -> FindLastBinAbove(0,1) );
  hist->GetXaxis()->SetRangeUser(xmin,xmax);
  double ymin = hist->GetYaxis()->GetBinCenter( hist -> FindFirstBinAbove(0,2) );
  double ymax = hist->GetYaxis()->GetBinCenter( hist -> FindLastBinAbove(0,2) );
  hist->GetYaxis()->SetRangeUser(ymin,ymax);
  hist->SetName(name.c_str());
  TCanvas *c = new TCanvas("c", "c", 2000, 1000);
  gStyle->SetPalette(55);  
  hist->SetStats(0);
  hist->SetTitle(title.c_str());
  c->SetRightMargin(0.13);
  hist->SetOption("COLZ");
  gStyle->SetPalette(55);  
  hist->Draw();
  if (save) {
    c->SaveAs(fname.c_str()); 
  }
  hist->SetDirectory(output);
  delete c;
  return;
}

// Fit gaussians to slices along the x-axis and plot their means
void fitSlicesGaus(TH2D *hist, string title, string fname,string g_fname, string name, TFile *output, bool save) { //, EColor colour) {//,int region,int type) {

  //Force the ranges to be sensible if ROOT's stupid autoscale fails like normal
  double xminh = hist->GetXaxis()->GetBinCenter( hist -> FindFirstBinAbove(0,1) );
  double xmaxh = hist->GetXaxis()->GetBinCenter( hist -> FindLastBinAbove(0,1) );
  //hist->GetXaxis()->SetRangeUser(xminh,xmaxh);
  double yminh = hist->GetYaxis()->GetBinCenter( hist -> FindFirstBinAbove(0,2) );
  double ymaxh = hist->GetYaxis()->GetBinCenter( hist -> FindLastBinAbove(0,2) );
  hist->GetYaxis()->SetRangeUser(yminh,ymaxh);
  int nBins = hist->GetNbinsX(); 
  // Hardcode this to change the number of slices
  int nSlices = nBins;
  // Get the length of the slice in x
  int length = nBins / nSlices;
  // Define the gaussian 
  TF1 *gFunc = new TF1("gFunc", "gaus");
  // Declare step edges
  int loStep;
  int hiStep;
  // Book a 1D hist for the Y projection slices
  TH1D *projY;
  // Book a 1D hist to take the results of each fit on it's X axis
  TH1D *projX = hist -> ProjectionX("prX");
  projX -> Rebin(length);
  projX -> Reset();
  // Threshold (minimum number of bins), to define the fit range
  double threshold;
  double fitMin;
  double fitMax;

  // Slice loop
  for(int i = 0 ; i < nSlices; i++) {
    // Define steps
    loStep = i*length;
    hiStep = (i+1)*length;
    // Perform projection
    projY = hist->ProjectionY("prY",loStep,hiStep-1);
    // Clean up bins with nothing in them
    if (projY -> GetEntries() < 1) continue; 
    //Define the threshold, trying to avoid those tails. Half maximum works. Hacky but never mind.
    threshold =  projY -> GetMaximum()  * (1/2);
    // Define the fit range
    fitMin = projY -> GetBinCenter(projY -> FindFirstBinAbove(threshold,1));
    fitMax = projY -> GetBinCenter(projY -> FindLastBinAbove(threshold,1));
    // "Q" supress printing ;"M" use minuit to improve fit result
    projY -> Fit(gFunc,"Q","",fitMin,fitMax);
    // Fill a histogram with the fit results
    projX -> SetBinContent(i+1, gFunc->GetParameter(1));
    projX -> SetBinError(i+1, gFunc->GetParError(1));
    TCanvas *c1 = new TCanvas();
    //ksiourmen
    gStyle->SetOptFit();
    gStyle->SetOptStat(112210);
    projY->SetMarkerColor(kBlack);
    projY->SetLineColor(kBlack);
    // projY -> DrawCopy();
    //gFunc -> DrawCopy("same");
    gPad->SetGrid();
    gPad->Update();
    // TPaveStats *stats = (TPaveStats*)hist->GetListOfFunctions()->FindObject("stats");
     projY -> DrawCopy();
    if (save) {
      c1->SaveAs((g_fname+"_"+to_string(i)+".pdf").c_str());
    }
    delete c1;
  } // End slice loop

  //Force the ranges to be sensible if ROOT's stupid autoscale fails like normal
  double xmin = projX -> GetBinCenter(projX->FindFirstBinAbove(0,1));//)-1 );
  double xmax = projX -> GetBinCenter(projX->FindLastBinAbove(0,1));//)+1 );

  projX->SetName(name.c_str());
  
  TCanvas *c2 = new TCanvas("c2", "c2", 2000, 1000);
  gStyle->SetOptStat(110010);
  projX->Draw();
  projX->SetTitle(title.c_str());
  projX->SetMarkerColor(kBlack);
  projX->SetLineColor(kBlack);
  projX->GetXaxis()->SetRangeUser(xmin,xmax);
  if (save) {
    c2->SaveAs(fname.c_str());
  } 
  projX->SetDirectory(output);

  delete c2;
  delete projX;
  delete projY;
  delete gFunc;
  return;

}



