// Fitting code for gain functions per xtal
// Sam Grant April-June 2019
// samuel.grant.18@ucl.ac.uk
// April-June 2019

#include <iostream>
#include "TF1.h"
#include "TH1D.h"
#include "TCanvas.h"
#include "TFile.h"
#include "TStyle.h"
#include "TLegend.h"
#include "TDirectory.h"
#include "TPaveStats.h"

using namespace std;

// Define gain sag function, a simple exponetial 
double GainSagFunc(double *x, double *par) {
  double time = x[0];
  double N0 = par[0]; // Overall normalisation
  double A = par[1]; // Amplitude 
  double tau = par[2]; // Recovery time  
  double N  = N0 * ( 1 - A * ( exp( - time / tau ) ) );
  return N; 
}

void GainSagFit(TH1D *hist, double binning, int start, double end) {

  TF1 *func = new TF1("GainSagFunc", GainSagFunc, binning*start, binning*end, 3);

  func->SetLineWidth(3);
  func->SetParameter(1,0.01);
  func->SetParLimits(1,0,0.1);
  func->SetParameter(2,5);
  func->SetParLimits(2,0,15);

  func->SetNpx(1000);
  func->SetParName(0,"G_{0}");
  func->SetParName(1,"#alpha");
  func->SetParName(2,"#tau_{r} [#mus]");
  //func->FixParameter(2,64.44);
  hist->Fit(func,"QMR");

  // cout<<"Normalisation:\t"<<func->GetParameter(0)<<endl;
  // cout<<"Amplitude:\t"<<func->GetParameter(1)<<"±"<<func->GetParError(1)<<endl;
  // cout<<"Lifetime:\t"<<func->GetParameter(2)<<"±"<<func->GetParError(2)<<endl;
  // cout<<"===================================="<<endl;

  return;

}

void FancyDraw(TH1D *hist, string title, TFile *output, int binning, int cycles) {

      hist->Draw();
      gStyle->SetStatFormat("6.3g"); 
      gStyle->SetOptStat(10);
      gStyle->SetOptFit(111);
      //Collect stats of the first histogram
      gPad->Update();

      TPaveStats *tps1 = (TPaveStats*)hist -> FindObject("stats");
      tps1->SetLineWidth(0);
      tps1->SetX1NDC(0.49);
      tps1->SetX2NDC(0.89);
      tps1->SetY1NDC(0.65);
      tps1->SetY2NDC(0.89);

      // Book 
      TCanvas *c1 = new TCanvas("","",800,600);

      hist->SetLineWidth(3);
      hist->SetTitle(title.c_str());
      hist->GetXaxis()->CenterTitle(true);
      hist->GetYaxis()->CenterTitle(true);
      hist->SetTitleSize(.75);
      hist->GetXaxis()->SetTitleSize(.04);
      hist->GetYaxis()->SetTitleSize(.04);
      hist->GetYaxis()->SetTitleOffset(1.2);
      hist->GetXaxis()->SetTitleOffset(1.2);

      float min = hist->GetFunction("GainSagFunc")->GetParameter(0) - 0.02;
      float max = hist->GetFunction("GainSagFunc")->GetParameter(0) + 0.02;

      hist->GetYaxis()->SetRangeUser(min, max);      
      //hist->GetYaxis()->SetRangeUser(0.99,1.01);
      hist->GetXaxis()->SetRangeUser(0,binning*cycles);
      //hist->SetStats(0);
      hist->Draw();
      tps1->Draw("same");

      //output->cd();
      hist->SetDirectory(gDirectory);

      delete c1;

      return;
    
}

int main() {

  bool quality = true;
  // Number of g-2 cycles
  int cycles = 50;
  int binning = 4.365;
  // Fit range
  int range = 50; // dumb
  bool laser = false;
  
  // Counter for crystals 
  int counter = 0;
  double tau_err_tot = 0.0;
  double amp_err_tot = 0.0;
  double chi_tot = 0.0;
 
  string dataset;
  bool goodInput = false;
  cout << "Enter run-1 dataset: 60h 9d HK EG Run1\n";
  cin >> dataset;
  if (dataset == "60h" || dataset == "9d" || dataset == "HK" || dataset == "EG" || dataset == "Run1") { 
     cout << "Starting\n" << endl;
  } else { 
    cout<<"Invalid dataset, stopping"<<endl;
  }

  string fitName;
  string fitMode;
  cout << "Select fit mode: '1' (SingleGaus) '2' (DoubleGaus) '3' (LanGaus)\n";
  cin >> fitName;
  if (fitName == "1") {
    fitMode = "SingleGaus";
    cout << "Using fitMode: "<< fitMode << "\nStarting\n" << endl; 
  } else if(fitName == "2") {
    fitMode = "DoubleGaus";
    cout << "Using fitMode: "<< fitMode << "\nStarting\n" << endl;
  } else if(fitName == "3") {
    fitMode = "LanGaus";
    cout << "Using fitMode: "<< fitMode << "\nStarting\n" << endl;
  } else {
    cout<<"Invalid fitmode, stopping"<<endl;
    exit(0);
  }

  string inputFname = "../plots/"+dataset+"/plotsEpTimeXtal_"+fitMode+"_"+dataset+".root";
 
  TFile *input = TFile::Open(inputFname.c_str());
  cout << "Reading\t" << inputFname << endl;

  // Book output ROOT file
  string outputFname = "../plots/"+dataset+"/fitsEpTimeXtal_"+fitMode+"_"+dataset+".root";
  TFile *output = new TFile(outputFname.c_str(), "recreate");
  
  // Define time limit
  const int maxTime = binning*cycles;

  cout<<"Xtal,N,ChiSqrNdf,Tau,dTau,Alpha,dAlpha"<<endl;
  //cout<<"dTau,dAlpha"<<endl;
  // Station loop
  for (int stn(12); stn < 19; stn = stn + 6) {

    string dir = "S"+to_string(stn);
    output->cd();
    output->mkdir(dir.c_str());
    output->cd(dir.c_str());

    // Crystal loop
    for (int xtal(0); xtal < 54; xtal++) {

      // cout<<"\nS "<<stn<<"\txtal "<<xtal<<endl;

      // Grab histogram
      string h = "PreGainCorr/S"+to_string(stn)+"/profiles/EoverPvsTimeXtal_"+to_string(xtal);
      TH1D *hist = (TH1D*)input->Get(h.c_str());

      // Skip empty ones
      if(hist == 0) {
        // cout<<"XTAL "+to_string(xtal)+"\t"<<"NOT FOUND"<<endl;
        continue;
      }

      GainSagFit(hist, binning, 1, cycles);
      // Grab the function
      TF1 *f1 = hist->GetFunction("GainSagFunc");
      if(f1==0) continue; // Skip failed fits
      // Book the gain sag function
      // Get fit constants 
      int N = hist->GetEntries();
      float chiSqrNDF = f1->GetChisquare() / f1->GetNDF();
      float A = f1->GetParameter(1);
      float A_err = f1->GetParError(1);
      float tau = f1->GetParameter(2);
      float tau_err = f1->GetParError(2);

      ///////////////////////////////////////////////////////
      //..................QUALITY CUTS.....................//
      ///////////////////////////////////////////////////////

      if (quality) {
        // Avoid low stats
        //if (N < 50000) continue;
        // Require a reasonable reduced chi square
        if( chiSqrNDF < 0.25 || chiSqrNDF > 4.0) continue;
        // Require low relative error
        if( tau_err > .5*tau || A_err > .5*A) continue;
      }

      // Add up surviving crystals
      counter++;

      // Draw

      FancyDraw(hist,"Station "+to_string(stn)+", Crystal "+to_string(xtal)+";In-fill time [#mus];E/p",output, binning, cycles);

      // Make some print outs
      cout<<xtal<<","<<N<<","<<chiSqrNDF<<","<<tau<<","<<tau_err<<","<<A<<","<<A_err<<endl;
      //cout<<tau_err<<","<<A_err<<endl;
      tau_err_tot = tau_err_tot + tau_err;
      amp_err_tot = amp_err_tot + A_err;
      chi_tot = chi_tot + chiSqrNDF;
      // delete f1;
    
    }

  }

  // Print out the number of xtals that pass quality cuts
  cout << "\nSurviving xtals: " << counter << endl;
  cout << "Mean tau_err = " << tau_err_tot / counter << endl;
  cout << "Mean amp_err = " << amp_err_tot / counter << endl;
  cout << "Mean chiSqrNDF = " << chi_tot / counter << endl;
  // Write and close input/output
  output->Write();
  output->Close();
  input->Close();

  cout << "Created: " << outputFname << endl;
  return 0; 
}



